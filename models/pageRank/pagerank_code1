package pageRank

import org.apache.spark.SparkContext  
import SparkContext._  

/**
  Created by cc on 3/9/16.
  */
  
object pageRank {  
    def main(args: Array[String]) {  
        val conf = new SparkConf()
            .setAppName("pageRank")
            .setMaster("local")
        val sc = new SparkContext(conf) 
		
        //import dataset
        val lines = sc.textFile("/user/root/316/7types_url/private.txt")  
		
        //create edges
        val links = lines.map(_.split(" "))
                         .filter(_.length == 2)
                         .map(parts => (parts(0), parts(1)))
                         .distinct()
                         .groupByKey()  
						 
        val nodes = scala.collection.mutable.ArrayBuffer.empty ++ links.keys.collect()
        val newNodes = scala.collection.mutable.ArrayBuffer[String]()  
        for {s <- links.values.collect()  
                 k <- s if (!nodes.contains(k))  
        } {  
            nodes += k  
            newNodes += k  
        }  
        val linkList = links ++ sc.parallelize(for (i <- newNodes) yield (i, List.empty))  
        val nodeSize = linkList.count()  
        //set initial rank
        var ranks = linkList.mapValues(v => 1.0 )  
		
        //execute cycle  to calculate actual ranks
        for (i <- 1 to 30) {  
            val score = sc.accumulator(0.0)  
            val contribut = linkList.join(ranks).values.flatMap {  
                case (urls, rank) => {  
                    val size = urls.size  
                    if (size == 0) {  
                        score += rank  
                        List()  
                    } else {  
                        urls.map(url => (url, rank / size))  
                    }  
                }  
            }  
        contribut.count()  
        val scoreValue = score.value  
        ranks = contribut.reduceByKey(_ + _).mapValues[Double](p =>  
            0.1 * (1.0 / nodeSize) + 0.9 * (scoreValue / nodeSize + p)  
            )  
        }  
		
        //order by ranks and save file
        var outputSort = sc.parallelize(ranks.collect())
        outputSort = outputSort.sortBy(word => word._2,false)
        outputSort.saveAsTextFile("/user/root/316/result/rank_private")
		
		sc.stop() 
    }  
}  